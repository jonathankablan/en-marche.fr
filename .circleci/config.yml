version: 2

references:
    working_directory: &working_directory
        working_directory: ~/app

    attach_workspace: &attach_workspace
        attach_workspace:
            at: ~/app

    configure_base: &configure_base
        environment:
            - DOCKER_COMPOSE: "docker-compose -f docker-compose.yml -f docker-compose.ci.yml"
            - EXEC: "$(DOCKER_COMPOSE) exec -T app"
        machine:
            enabled: true
            image: circleci/classic:201711-01

    generate_docker_hashes: &generate_docker_hashes
        run: |
            test -e docker-dev.md5 || find docker/dev -type f -exec md5sum {} \; | sort -k 2 > docker-dev.md5
            echo 'export APP_DOCKER_IMAGE_NAME=eu.gcr.io/${GCLOUD_PROJECT}/app' >> $BASH_ENV
            echo 'export APP_DOCKER_IMAGE_MD5=$(md5sum docker-dev.md5 | cut -f1 -d" ")' >> $BASH_ENV

    authenticate_on_registry: &authenticate_on_registry
        run: |
            set -x

            echo $GCLOUD_SERVICE_KEY | base64 --decode > $HOME/gcloud-service-key.json && cp $HOME/gcloud-service-key.json ./gcloud-service-key.json
            gcloud auth activate-service-account --key-file $HOME/gcloud-service-key.json
            gcloud config set project $GCLOUD_PROJECT

    pull_docker_images: &pull_docker_images
        run: gcloud docker -- pull $APP_DOCKER_IMAGE_NAME:$APP_DOCKER_IMAGE_MD5

    start_containers: &start_containers
        run: make up perm

jobs:
    build:
        <<: *working_directory
        <<: *configure_base
        steps:
            - checkout

            - restore_cache:
                  key: composer-{{ checksum "composer.lock" }}
            - restore_cache:
                  key: npm-{{ checksum "yarn.lock" }}

            - *generate_docker_hashes
            - *authenticate_on_registry
            - run: |
                set -x

                gcloud docker -- pull $APP_DOCKER_IMAGE_NAME:dev || true
                gcloud docker -- pull $APP_DOCKER_IMAGE_NAME:$APP_DOCKER_IMAGE_MD5 || true

                make build

                make up
                make -j2 node_modules assets-prod assets-amp var/public.key
                make vendor cc

                gcloud docker -- push $APP_DOCKER_IMAGE_NAME:$APP_DOCKER_IMAGE_MD5
                gcloud container images add-tag $APP_DOCKER_IMAGE_NAME:$APP_DOCKER_IMAGE_MD5 $APP_DOCKER_IMAGE_NAME:dev --quiet

            - save_cache:
                  paths:
                      - ./vendor
                  key: composer-{{ checksum "composer.lock" }}
            - save_cache:
                  paths:
                      - ./node_modules
                  key: npm-{{ checksum "yarn.lock" }}

            - persist_to_workspace:
                  root: ./
                  paths:
                      - ./

    lint:
        <<: *working_directory
        <<: *configure_base
        steps:
            - *attach_workspace
            - *generate_docker_hashes
            - *authenticate_on_registry
            - *pull_docker_images
            - *start_containers
            - run: |
                set -x

                make -j2 lint security-check

    phpunit:
        <<: *working_directory
        <<: *configure_base
        parallelism: 3
        steps:
            - *attach_workspace
            - *generate_docker_hashes
            - *authenticate_on_registry
            - *pull_docker_images
            - *start_containers
            - run: |
                set -x

                mkdir -p ./phpunit
                make tfp-rabbitmq tfp-db

                GROUP1='adherent,amp,article,boardMember,citizenProject,referent,procuration'
                GROUP2='committee,committeeManager,coordinator,documents,donation,eventManager,explainer,facebook,home,invitation,legislatives,jeMarche,map,membership,citizenAction'

                case $CIRCLE_NODE_INDEX in
                    0)
                        $DOCKER_COMPOSE exec app ./vendor/bin/phpunit --group $GROUP1 --log-junit ./phpunit/junit.xml
                        ;;
                    1)
                        $DOCKER_COMPOSE exec app ./vendor/bin/phpunit --group $GROUP2 --log-junit ./phpunit/junit.xml
                        ;;
                    2)
                        $DOCKER_COMPOSE exec app ./vendor/bin/phpunit --exclude-group $GROUP1,$GROUP2 --log-junit ./phpunit/junit.xml
                        ;;

                    *)
                        echo "Too many parallelism instances configured\n"
                        exit 1
                esac
            - store_test_results:
                path: ./phpunit

    behat:
        <<: *working_directory
        <<: *configure_base
        steps:
            - *attach_workspace
            - *generate_docker_hashes
            - *authenticate_on_registry
            - *pull_docker_images
            - *start_containers
            - run: |
                set -x

                mkdir -p ./behat
                make -j2 tfp-rabbitmq tfp-db

                $DOCKER_COMPOSE exec app ./vendor/bin/behat -vvv --colors -f progress -o std -f junit -o ./behat --
            - store_test_results:
                path: ./behat

    deployment:
        <<: *working_directory
        docker:
            - image: google/cloud-sdk
        steps:
            - *attach_workspace
            - *authenticate_on_registry
            - setup_remote_docker
            - run: |
                bash scripts/build.sh

workflows:
    version: 2
    test_deploy:
        jobs:
            - build

            - lint:
                requires:
                    - build
            - phpunit:
                requires:
                    - build
            - behat:
                requires:
                    - build

            - deployment:
                requires:
                    - phpunit
                    - behat
                    - lint
                filters:
                    branches:
                        only:
                            - master

    prod_deploy:
        jobs:
            - build:
                filters:
                  branches:
                      ignore: /.*/
                  tags:
                      only: /^v[0-9]+\.[0-9]+\.[0-9]+$/

            - deployment:
                requires:
                    - build
                filters:
                    branches:
                        ignore: /.*/
                    tags:
                        only: /^v[0-9]+\.[0-9]+\.[0-9]+$/
